WARNING:objex.OBJEX_OT_export.execute: Scene uses display_device='sRGB' which changes how colors are displayed in the viewport, reducing the preview accuracy.
This can be changed under Color Management in Render properties.
Note that this should also be kept consistent with the Color Space property of image texture nodes (display_device="None", Color Space="Linear").
Recommended value: None
INFO:objex.OBJEX_OT_export.progress_report_print:   (  0.0000 sec |   0.0000 sec) Objex Export path: 'Z:\\OoTmodding\\zelda\\z64rom_dungen\\src\\object\\0x007F-RedBlueBlock\\redblueblock.objex'
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating singlepillar, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0040 sec |   0.0030 sec) Finished writing geometry of 'singlepillar'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating triplepillar, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0090 sec |   0.0040 sec) Finished writing geometry of 'triplepillar'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating collision.singlepillar, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0130 sec |   0.0030 sec) Finished writing geometry of 'collision.singlepillar'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating collision.triplepillar, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0171 sec |   0.0031 sec) Finished writing geometry of 'collision.triplepillar'.
DEBUG:objex.ObjexWriter.write_object: Skipped triangulating dummytriforce, mesh only has triangles
INFO:objex.OBJEX_OT_export.progress_report_print:         (  0.0210 sec |   0.0020 sec) Finished writing geometry of 'dummytriforce'.
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.0230 sec |   0.0230 sec) Finished exporting geometry, now exporting materials
TRACE:objex.export_objex_mtl.write_mtl: Writing name='normalpillar' name_q='"normalpillar"' material=<bpy_struct, Material("normalpillar") at 0x000001CDBA29D908, evaluated> face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA315608, evaluated>, 'G_ACMUX_TEXEL0': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA316808, evaluated>, 'G_ACMUX_PRIMITIVE': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA317808, evaluated>, 'G_CCMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA315608, evaluated>, 'G_CCMUX_SHADE': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA315A08, evaluated>, 'G_CCMUX_TEXEL0': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA316A08, evaluated>, 'G_CCMUX_ENVIRONMENT': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA317208, evaluated>}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA317808, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_PrimColor") at 0x000001CDAEED6B08, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA317208, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_EnvColor") at 0x000001CDAEED6948, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA316A08, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAEED6788, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA316808, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAEED6788, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA315A08, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Shade") at 0x000001CDAEED6408, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveA': 1.0, 'environmentRGB': bpy.data.materials['normalpillar'].node_tree.nodes["OBJEX_EnvColorRGB"].outputs[0].default_value, 'texel0RGB': {'image': bpy.data.images['normalpillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['normalpillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['normalpillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['normalpillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['normalpillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='toppillar' name_q='"toppillar"' material=<bpy_struct, Material("toppillar") at 0x000001CDAEFAA388, evaluated> face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA2BE208, evaluated>, 'G_ACMUX_TEXEL0': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA2BF408, evaluated>, 'G_ACMUX_PRIMITIVE': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA2D4608, evaluated>, 'G_CCMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA2BE208, evaluated>, 'G_CCMUX_SHADE': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BE608, evaluated>, 'G_CCMUX_TEXEL0': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BF608, evaluated>, 'G_CCMUX_ENVIRONMENT': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BFE08, evaluated>}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA2D4608, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_PrimColor") at 0x000001CDAEEC0D48, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BFE08, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_EnvColor") at 0x000001CDAEEC0B88, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BF608, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAEEC09C8, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA2BF408, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAEEC09C8, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA2BE608, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Shade") at 0x000001CDAEEC0648, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveA': 1.0, 'environmentRGB': bpy.data.materials['toppillar'].node_tree.nodes["OBJEX_EnvColorRGB"].outputs[0].default_value, 'texel0RGB': {'image': bpy.data.images['toppillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['toppillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['toppillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['toppillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['toppillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
TRACE:objex.export_objex_mtl.write_mtl: Writing name='Collision' name_q='"Collision"' material=<bpy_struct, Material("Collision") at 0x000001CDBA8BE508, evaluated> face_img=None
TRACE:objex.export_objex_mtl.write_mtl: Writing name='triforcepillar' name_q='"triforcepillar"' material=<bpy_struct, Material("triforcepillar") at 0x000001CDBA8A4108, evaluated> face_img=None
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: per-flag used sockets: {'G_ACMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA86F008, evaluated>, 'G_ACMUX_TEXEL0': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA31C408, evaluated>, 'G_ACMUX_PRIMITIVE': <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA31D408, evaluated>, 'G_CCMUX_0': <bpy_struct, NodeSocketColor("0") at 0x000001CDBA86F008, evaluated>, 'G_CCMUX_SHADE': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA86F408, evaluated>, 'G_CCMUX_TEXEL0': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA31C608, evaluated>, 'G_CCMUX_ENVIRONMENT': <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA31CE08, evaluated>}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting primitiveA from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA31D408, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_PrimColor") at 0x000001CDAF07BAC8, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting environmentRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA31CE08, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_EnvColor") at 0x000001CDAF07B908, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0RGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA31C608, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAF07BC88, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting texel0A from <bpy_struct, NodeSocketColor("Alpha") at 0x000001CDBA31C408, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Texel0") at 0x000001CDAF07BC88, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: getting shadeRGB from <bpy_struct, NodeSocketColor("Color") at 0x000001CDBA86F408, evaluated> (socket node: <bpy_struct, ShaderNodeGroup("OBJEX_Shade") at 0x000001CDAF07B748, evaluated>)
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: data before merge: {'primitiveA': 1.0, 'environmentRGB': bpy.data.materials['triforcepillar'].node_tree.nodes["OBJEX_EnvColorRGB"].outputs[0].default_value, 'texel0RGB': {'image': bpy.data.images['triforcepillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'texel0A': {'image': bpy.data.images['triforcepillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}, 'shadeRGB': {'type': 'normals'}}
DEBUG:objex.ObjexMaterialNodeTreeExplorer.buildCombinerInputs: Merged texel0RGB {'image': bpy.data.images['triforcepillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} and texel0A {'image': bpy.data.images['triforcepillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0} into texel0 {'image': bpy.data.images['triforcepillar'], 'uv_scale_u': 0, 'uv_scale_v': 0, 'uv_wrap_u': True, 'uv_wrap_v': True, 'uv_mirror_u': False, 'uv_mirror_v': False, 'uv_layer': False, 'uv_map': '', 'texgen': False, 'texgen_linear': False, 'uv_scale_u_main': 1.0, 'uv_scale_v_main': 1.0}
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.0311 sec |   0.0311 sec) Finished exporting materials, now exporting skeletons/animations
INFO:objex.OBJEX_OT_export.progress_report_print:     (  0.0321 sec |   0.0321 sec) Objex Export Finished
